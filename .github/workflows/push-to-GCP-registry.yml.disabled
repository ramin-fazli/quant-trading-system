name: Build and Push to Google Artifact Registry

on:
  push:
    branches: [ version/2.3 ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ version/2.3 ]
  workflow_dispatch:

env:
  GAR_LOCATION: europe-west3
  GAR_REPOSITORY: trading-system
  IMAGE_NAME: pair-trading-system

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

    - name: Verify authentication and repository
      run: |
        echo "🔍 Verifying Google Cloud authentication..."
        gcloud auth list
        echo "📋 Current project: $(gcloud config get-value project)"
        echo "🏷️ Repository URL: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}"
        
        # Check if repository exists
        echo "🔍 Checking if Artifact Registry repository exists..."
        gcloud artifacts repositories describe ${{ env.GAR_REPOSITORY }} \
          --location=${{ env.GAR_LOCATION }} \
          --project=${{ secrets.GCP_PROJECT_ID }} || echo "❌ Repository not found"

    - name: Create Artifact Registry repository if not exists
      run: |
        # Try to create the repository (will fail if it already exists, which is fine)
        echo "🏗️ Creating Artifact Registry repository if it doesn't exist..."
        gcloud artifacts repositories create ${{ env.GAR_REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --description="Trading system Docker images" || echo "ℹ️ Repository might already exist"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.live
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image scan with Trivy
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Output image details
      run: |
        echo "🐳 Docker image built and pushed successfully!"
        echo "📍 Repository: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}"
        echo "🏷️ Tags:"
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
        
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "🎉 Release build for tag: ${{ github.ref_name }}"
        elif [ "${{ github.ref_name }}" = "version/2.3" ]; then
          echo "🔧 Version 2.2 branch build"
        fi

  update-deployment:
    name: Update Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/version/2.3'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update deployment configuration
      run: |
        echo "📝 Creating deployment update with new image..."
        
        # Extract the image tag
        IMAGE_TAG="${{ github.sha }}"
        FULL_IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
        
        echo "🐳 New image: $FULL_IMAGE"
        
        # Create a deployment update file
        cat > deployment-update.env << EOF
        # Updated image for deployment
        TRADING_SYSTEM_IMAGE=$FULL_IMAGE
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_SHA=${{ github.sha }}
        GIT_REF=${{ github.ref_name }}
        EOF
        
        echo "✅ Deployment configuration updated"
        cat deployment-update.env

    - name: Trigger deployment webhook (optional)
      if: vars.DEPLOYMENT_WEBHOOK_URL != ''
      run: |
        curl -X POST "${{ vars.DEPLOYMENT_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_WEBHOOK_TOKEN }}" \
          -d '{
            "image": "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "repository": "${{ github.repository }}"
          }'
